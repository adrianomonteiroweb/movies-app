// Code generated by protoc-gen-go. DO NOT EDIT.
// source: moviesapp.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4d83b0fc6999f2, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type MovieInfo struct {
	ID                   string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Isbn                 string    `protobuf:"bytes,2,opt,name=isbn,proto3" json:"isbn,omitempty"`
	Title                string    `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Director             *Director `protobuf:"bytes,4,opt,name=director,proto3" json:"director,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MovieInfo) Reset()         { *m = MovieInfo{} }
func (m *MovieInfo) String() string { return proto.CompactTextString(m) }
func (*MovieInfo) ProtoMessage()    {}
func (*MovieInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4d83b0fc6999f2, []int{1}
}

func (m *MovieInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovieInfo.Unmarshal(m, b)
}
func (m *MovieInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovieInfo.Marshal(b, m, deterministic)
}
func (m *MovieInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovieInfo.Merge(m, src)
}
func (m *MovieInfo) XXX_Size() int {
	return xxx_messageInfo_MovieInfo.Size(m)
}
func (m *MovieInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MovieInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MovieInfo proto.InternalMessageInfo

func (m *MovieInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *MovieInfo) GetIsbn() string {
	if m != nil {
		return m.Isbn
	}
	return ""
}

func (m *MovieInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MovieInfo) GetDirector() *Director {
	if m != nil {
		return m.Director
	}
	return nil
}

type Director struct {
	Firstname            string   `protobuf:"bytes,1,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname             string   `protobuf:"bytes,2,opt,name=lastname,proto3" json:"lastname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Director) Reset()         { *m = Director{} }
func (m *Director) String() string { return proto.CompactTextString(m) }
func (*Director) ProtoMessage()    {}
func (*Director) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4d83b0fc6999f2, []int{2}
}

func (m *Director) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Director.Unmarshal(m, b)
}
func (m *Director) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Director.Marshal(b, m, deterministic)
}
func (m *Director) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Director.Merge(m, src)
}
func (m *Director) XXX_Size() int {
	return xxx_messageInfo_Director.Size(m)
}
func (m *Director) XXX_DiscardUnknown() {
	xxx_messageInfo_Director.DiscardUnknown(m)
}

var xxx_messageInfo_Director proto.InternalMessageInfo

func (m *Director) GetFirstname() string {
	if m != nil {
		return m.Firstname
	}
	return ""
}

func (m *Director) GetLastname() string {
	if m != nil {
		return m.Lastname
	}
	return ""
}

type ID struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4d83b0fc6999f2, []int{3}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Status struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4d83b0fc6999f2, []int{4}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*MovieInfo)(nil), "MovieInfo")
	proto.RegisterType((*Director)(nil), "Director")
	proto.RegisterType((*ID)(nil), "ID")
	proto.RegisterType((*Status)(nil), "Status")
}

func init() {
	proto.RegisterFile("moviesapp.proto", fileDescriptor_8b4d83b0fc6999f2)
}

var fileDescriptor_8b4d83b0fc6999f2 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xdf, 0x6a, 0xfa, 0x30,
	0x14, 0xc7, 0x49, 0xb5, 0x6a, 0x8f, 0x3f, 0x14, 0x0e, 0x3f, 0x46, 0x29, 0x43, 0x5d, 0x61, 0xc3,
	0xab, 0xb0, 0xb9, 0xbd, 0x80, 0x2e, 0x63, 0xf4, 0x42, 0x10, 0xc7, 0x6e, 0x76, 0x17, 0x35, 0x8e,
	0x40, 0x35, 0x21, 0x8d, 0x82, 0xaf, 0xb3, 0x67, 0xd8, 0x03, 0x8e, 0xa6, 0x7f, 0xd6, 0xdd, 0xe5,
	0x7c, 0x3f, 0xdf, 0x9c, 0xbf, 0x30, 0x3c, 0xa8, 0xb3, 0x14, 0x19, 0xd7, 0x9a, 0x6a, 0xa3, 0xac,
	0x8a, 0xbb, 0xe0, 0xbf, 0x1c, 0xb4, 0xbd, 0xc4, 0x29, 0x04, 0xcb, 0x9c, 0x25, 0xc7, 0xbd, 0xc2,
	0x01, 0x78, 0x09, 0x0b, 0xc9, 0x84, 0x4c, 0x83, 0xb5, 0x97, 0x30, 0x44, 0x68, 0xcb, 0x6c, 0x73,
	0x0c, 0x3d, 0xa7, 0xb8, 0x37, 0xfe, 0x07, 0xdf, 0x4a, 0x9b, 0x8a, 0xb0, 0xe5, 0xc4, 0x22, 0xc0,
	0x5b, 0xe8, 0xed, 0xa4, 0x11, 0x5b, 0xab, 0x4c, 0xd8, 0x9e, 0x90, 0x69, 0x7f, 0x16, 0x50, 0x56,
	0x0a, 0xeb, 0x1a, 0xc5, 0x0c, 0x7a, 0x95, 0x8a, 0xd7, 0x10, 0xec, 0xa5, 0xc9, 0xec, 0x91, 0x1f,
	0x44, 0x59, 0xf3, 0x57, 0xc0, 0x08, 0x7a, 0x29, 0x2f, 0x61, 0x51, 0xbe, 0x8e, 0xe3, 0x28, 0x6f,
	0x33, 0x6f, 0xe4, 0xcc, 0xd3, 0x53, 0xf5, 0xb7, 0x08, 0xe2, 0x11, 0x74, 0xde, 0x2c, 0xb7, 0xa7,
	0xec, 0x2f, 0xf7, 0x4b, 0x3e, 0xfb, 0x26, 0xe0, 0xbb, 0x81, 0xf1, 0x06, 0x82, 0x57, 0x61, 0xdd,
	0x3b, 0xc3, 0x0e, 0x75, 0xeb, 0x88, 0x80, 0xd6, 0xdb, 0xb8, 0x27, 0x38, 0x86, 0x7f, 0x95, 0x65,
	0x71, 0x49, 0x18, 0xb6, 0x68, 0xc2, 0x9a, 0x16, 0x1c, 0x41, 0xff, 0xd9, 0x08, 0x6e, 0x45, 0x91,
	0xb2, 0x81, 0xa2, 0xdc, 0x8b, 0x77, 0x30, 0x7c, 0xd7, 0xbb, 0x8a, 0xbb, 0x1c, 0x4d, 0x4f, 0x97,
	0x96, 0xbd, 0x8e, 0x61, 0xc8, 0x44, 0x2a, 0x9a, 0x3e, 0x57, 0xab, 0x32, 0x2c, 0x9e, 0xe0, 0x4a,
	0x2a, 0xfa, 0x69, 0xf4, 0x96, 0x72, 0xad, 0x1f, 0x68, 0x7d, 0xcf, 0xc5, 0xa0, 0x98, 0x60, 0xae,
	0xf5, 0x2a, 0xbf, 0xec, 0x8a, 0x7c, 0x78, 0x7a, 0xf3, 0xe5, 0xb5, 0x96, 0xf3, 0xd5, 0xa6, 0xe3,
	0x8e, 0xfd, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x5e, 0xe2, 0xcf, 0xff, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MovieClient is the client API for Movie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MovieClient interface {
	GetMovies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Movie_GetMoviesClient, error)
	GetMovieByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*MovieInfo, error)
	CreateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*ID, error)
	UpdateMovieByID(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteMovieByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
}

type movieClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieClient(cc grpc.ClientConnInterface) MovieClient {
	return &movieClient{cc}
}

func (c *movieClient) GetMovies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Movie_GetMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Movie_serviceDesc.Streams[0], "/Movie/GetMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieGetMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Movie_GetMoviesClient interface {
	Recv() (*MovieInfo, error)
	grpc.ClientStream
}

type movieGetMoviesClient struct {
	grpc.ClientStream
}

func (x *movieGetMoviesClient) Recv() (*MovieInfo, error) {
	m := new(MovieInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieClient) GetMovieByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*MovieInfo, error) {
	out := new(MovieInfo)
	err := c.cc.Invoke(ctx, "/Movie/GetMovieByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) CreateMovie(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/Movie/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) UpdateMovieByID(ctx context.Context, in *MovieInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Movie/UpdateMovieByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieClient) DeleteMovieByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/Movie/DeleteMovieByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServer is the server API for Movie service.
type MovieServer interface {
	GetMovies(*Empty, Movie_GetMoviesServer) error
	GetMovieByID(context.Context, *ID) (*MovieInfo, error)
	CreateMovie(context.Context, *MovieInfo) (*ID, error)
	UpdateMovieByID(context.Context, *MovieInfo) (*Status, error)
	DeleteMovieByID(context.Context, *ID) (*Status, error)
}

// UnimplementedMovieServer can be embedded to have forward compatible implementations.
type UnimplementedMovieServer struct {
}

func (*UnimplementedMovieServer) GetMovies(req *Empty, srv Movie_GetMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (*UnimplementedMovieServer) GetMovieByID(ctx context.Context, req *ID) (*MovieInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieByID not implemented")
}
func (*UnimplementedMovieServer) CreateMovie(ctx context.Context, req *MovieInfo) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (*UnimplementedMovieServer) UpdateMovieByID(ctx context.Context, req *MovieInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovieByID not implemented")
}
func (*UnimplementedMovieServer) DeleteMovieByID(ctx context.Context, req *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovieByID not implemented")
}

func RegisterMovieServer(s *grpc.Server, srv MovieServer) {
	s.RegisterService(&_Movie_serviceDesc, srv)
}

func _Movie_GetMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServer).GetMovies(m, &movieGetMoviesServer{stream})
}

type Movie_GetMoviesServer interface {
	Send(*MovieInfo) error
	grpc.ServerStream
}

type movieGetMoviesServer struct {
	grpc.ServerStream
}

func (x *movieGetMoviesServer) Send(m *MovieInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Movie_GetMovieByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).GetMovieByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Movie/GetMovieByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).GetMovieByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Movie/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).CreateMovie(ctx, req.(*MovieInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_UpdateMovieByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).UpdateMovieByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Movie/UpdateMovieByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).UpdateMovieByID(ctx, req.(*MovieInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movie_DeleteMovieByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServer).DeleteMovieByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Movie/DeleteMovieByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServer).DeleteMovieByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Movie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Movie",
	HandlerType: (*MovieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovieByID",
			Handler:    _Movie_GetMovieByID_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _Movie_CreateMovie_Handler,
		},
		{
			MethodName: "UpdateMovieByID",
			Handler:    _Movie_UpdateMovieByID_Handler,
		},
		{
			MethodName: "DeleteMovieByID",
			Handler:    _Movie_DeleteMovieByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMovies",
			Handler:       _Movie_GetMovies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "moviesapp.proto",
}
